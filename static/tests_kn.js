QUnit.test("u2a ಂ => A", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಂ"), "A");});
QUnit.test("a2u A => ಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("A"), "ಂ");});
QUnit.test("u2a ಃ => B", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಃ"), "B");});
QUnit.test("a2u B => ಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("B"), "ಃ");});
QUnit.test("u2a ಅ => C", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಅ"), "C");});
QUnit.test("a2u C => ಅ", function(assert){assert.strictEqual(kn.ascii_to_unicode("C"), "ಅ");});
QUnit.test("u2a ಆ => D", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಆ"), "D");});
QUnit.test("a2u D => ಆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("D"), "ಆ");});
QUnit.test("u2a ಇ => E", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಇ"), "E");});
QUnit.test("a2u E => ಇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("E"), "ಇ");});
QUnit.test("u2a ಈ => F", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಈ"), "F");});
QUnit.test("a2u F => ಈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("F"), "ಈ");});
QUnit.test("u2a ಉ => G", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಉ"), "G");});
QUnit.test("a2u G => ಉ", function(assert){assert.strictEqual(kn.ascii_to_unicode("G"), "ಉ");});
QUnit.test("u2a ಊ => H", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಊ"), "H");});
QUnit.test("a2u H => ಊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("H"), "ಊ");});
QUnit.test("u2a ಋ => IÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಋ"), "IÄ");});
QUnit.test("a2u IÄ => ಋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("IÄ"), "ಋ");});
QUnit.test("u2a ಎ => J", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಎ"), "J");});
QUnit.test("a2u J => ಎ", function(assert){assert.strictEqual(kn.ascii_to_unicode("J"), "ಎ");});
QUnit.test("u2a ಏ => K", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಏ"), "K");});
QUnit.test("a2u K => ಏ", function(assert){assert.strictEqual(kn.ascii_to_unicode("K"), "ಏ");});
QUnit.test("u2a ಐ => L", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಐ"), "L");});
QUnit.test("a2u L => ಐ", function(assert){assert.strictEqual(kn.ascii_to_unicode("L"), "ಐ");});
QUnit.test("u2a ಒ => M", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಒ"), "M");});
QUnit.test("a2u M => ಒ", function(assert){assert.strictEqual(kn.ascii_to_unicode("M"), "ಒ");});
QUnit.test("u2a ಓ => N", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಓ"), "N");});
QUnit.test("a2u N => ಓ", function(assert){assert.strictEqual(kn.ascii_to_unicode("N"), "ಓ");});
QUnit.test("u2a ಔ => O", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಔ"), "O");});
QUnit.test("a2u O => ಔ", function(assert){assert.strictEqual(kn.ascii_to_unicode("O"), "ಔ");});
QUnit.test("u2a ಅಂ => CA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಅಂ"), "CA");});
QUnit.test("a2u CA => ಅಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("CA"), "ಅಂ");});
QUnit.test("u2a ಅಃ => CB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಅಃ"), "CB");});
QUnit.test("a2u CB => ಅಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("CB"), "ಅಃ");});
QUnit.test("u2a ಅಂ => CA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಅಂ"), "CA");});
QUnit.test("a2u CA => ಅಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("CA"), "ಅಂ");});
QUnit.test("u2a ಆಂ => DA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಆಂ"), "DA");});
QUnit.test("a2u DA => ಆಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("DA"), "ಆಂ");});
QUnit.test("u2a ಇಂ => EA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಇಂ"), "EA");});
QUnit.test("a2u EA => ಇಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("EA"), "ಇಂ");});
QUnit.test("u2a ಈಂ => FA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಈಂ"), "FA");});
QUnit.test("a2u FA => ಈಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("FA"), "ಈಂ");});
QUnit.test("u2a ಉಂ => GA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಉಂ"), "GA");});
QUnit.test("a2u GA => ಉಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("GA"), "ಉಂ");});
QUnit.test("u2a ಊಂ => HA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಊಂ"), "HA");});
QUnit.test("a2u HA => ಊಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("HA"), "ಊಂ");});
QUnit.test("u2a ಋಂ => IÄA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಋಂ"), "IÄA");});
QUnit.test("a2u IÄA => ಋಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("IÄA"), "ಋಂ");});
QUnit.test("u2a ಎಂ => JA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಎಂ"), "JA");});
QUnit.test("a2u JA => ಎಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("JA"), "ಎಂ");});
QUnit.test("u2a ಏಂ => KA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಏಂ"), "KA");});
QUnit.test("a2u KA => ಏಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("KA"), "ಏಂ");});
QUnit.test("u2a ಐಂ => LA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಐಂ"), "LA");});
QUnit.test("a2u LA => ಐಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("LA"), "ಐಂ");});
QUnit.test("u2a ಒಂ => MA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಒಂ"), "MA");});
QUnit.test("a2u MA => ಒಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("MA"), "ಒಂ");});
QUnit.test("u2a ಓಂ => NA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಓಂ"), "NA");});
QUnit.test("a2u NA => ಓಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("NA"), "ಓಂ");});
QUnit.test("u2a ಔಂ => OA", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಔಂ"), "OA");});
QUnit.test("a2u OA => ಔಂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("OA"), "ಔಂ");});
QUnit.test("u2a ಅಃ => CB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಅಃ"), "CB");});
QUnit.test("a2u CB => ಅಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("CB"), "ಅಃ");});
QUnit.test("u2a ಆಃ => DB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಆಃ"), "DB");});
QUnit.test("a2u DB => ಆಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("DB"), "ಆಃ");});
QUnit.test("u2a ಇಃ => EB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಇಃ"), "EB");});
QUnit.test("a2u EB => ಇಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("EB"), "ಇಃ");});
QUnit.test("u2a ಈಃ => FB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಈಃ"), "FB");});
QUnit.test("a2u FB => ಈಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("FB"), "ಈಃ");});
QUnit.test("u2a ಉಃ => GB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಉಃ"), "GB");});
QUnit.test("a2u GB => ಉಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("GB"), "ಉಃ");});
QUnit.test("u2a ಊಃ => HB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಊಃ"), "HB");});
QUnit.test("a2u HB => ಊಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("HB"), "ಊಃ");});
QUnit.test("u2a ಋಃ => IÄB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಋಃ"), "IÄB");});
QUnit.test("a2u IÄB => ಋಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("IÄB"), "ಋಃ");});
QUnit.test("u2a ಎಃ => JB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಎಃ"), "JB");});
QUnit.test("a2u JB => ಎಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("JB"), "ಎಃ");});
QUnit.test("u2a ಏಃ => KB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಏಃ"), "KB");});
QUnit.test("a2u KB => ಏಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("KB"), "ಏಃ");});
QUnit.test("u2a ಐಃ => LB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಐಃ"), "LB");});
QUnit.test("a2u LB => ಐಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("LB"), "ಐಃ");});
QUnit.test("u2a ಒಃ => MB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಒಃ"), "MB");});
QUnit.test("a2u MB => ಒಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("MB"), "ಒಃ");});
QUnit.test("u2a ಓಃ => NB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಓಃ"), "NB");});
QUnit.test("a2u NB => ಓಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("NB"), "ಓಃ");});
QUnit.test("u2a ಔಃ => OB", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಔಃ"), "OB");});
QUnit.test("a2u OB => ಔಃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("OB"), "ಔಃ");});
QUnit.test("u2a ಕ್ => Pï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕ್"), "Pï");});
QUnit.test("a2u Pï => ಕ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("Pï"), "ಕ್");});
QUnit.test("u2a ಕ => PÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕ"), "PÀ");});
QUnit.test("a2u PÀ => ಕ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÀ"), "ಕ");});
QUnit.test("u2a ಕಾ => PÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕಾ"), "PÁ");});
QUnit.test("a2u PÁ => ಕಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÁ"), "ಕಾ");});
QUnit.test("u2a ಕಿ => Q", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕಿ"), "Q");});
QUnit.test("a2u Q => ಕಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("Q"), "ಕಿ");});
QUnit.test("u2a ಕೀ => QÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೀ"), "QÃ");});
QUnit.test("a2u QÃ => ಕೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("QÃ"), "ಕೀ");});
QUnit.test("u2a ಕು => PÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕು"), "PÀÄ");});
QUnit.test("a2u PÀÄ => ಕು", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÀÄ"), "ಕು");});
QUnit.test("u2a ಕೂ => PÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೂ"), "PÀÆ");});
QUnit.test("a2u PÀÆ => ಕೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÀÆ"), "ಕೂ");});
QUnit.test("u2a ಕೃ => PÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೃ"), "PÀÈ");});
QUnit.test("a2u PÀÈ => ಕೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÀÈ"), "ಕೃ");});
QUnit.test("u2a ಕೆ => PÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೆ"), "PÉ");});
QUnit.test("a2u PÉ => ಕೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÉ"), "ಕೆ");});
QUnit.test("u2a ಕೇ => PÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೇ"), "PÉÃ");});
QUnit.test("a2u PÉÃ => ಕೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÉÃ"), "ಕೇ");});
QUnit.test("u2a ಕೈ => PÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೈ"), "PÉÊ");});
QUnit.test("a2u PÉÊ => ಕೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÉÊ"), "ಕೈ");});
QUnit.test("u2a ಕೊ => PÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೊ"), "PÉÆ");});
QUnit.test("a2u PÉÆ => ಕೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÉÆ"), "ಕೊ");});
QUnit.test("u2a ಕೋ => PÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೋ"), "PÉÆÃ");});
QUnit.test("a2u PÉÆÃ => ಕೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PÉÆÃ"), "ಕೋ");});
QUnit.test("u2a ಕೌ => PË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಕೌ"), "PË");});
QUnit.test("a2u PË => ಕೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("PË"), "ಕೌ");});
QUnit.test("u2a ಖ್ => Sï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖ್"), "Sï");});
QUnit.test("a2u Sï => ಖ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("Sï"), "ಖ್");});
QUnit.test("u2a ಖ => R", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖ"), "R");});
QUnit.test("a2u R => ಖ", function(assert){assert.strictEqual(kn.ascii_to_unicode("R"), "ಖ");});
QUnit.test("u2a ಖಾ => SÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖಾ"), "SÁ");});
QUnit.test("a2u SÁ => ಖಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÁ"), "ಖಾ");});
QUnit.test("u2a ಖಿ => T", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖಿ"), "T");});
QUnit.test("a2u T => ಖಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("T"), "ಖಿ");});
QUnit.test("u2a ಖೀ => TÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೀ"), "TÃ");});
QUnit.test("a2u TÃ => ಖೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("TÃ"), "ಖೀ");});
QUnit.test("u2a ಖು => RÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖು"), "RÄ");});
QUnit.test("a2u RÄ => ಖು", function(assert){assert.strictEqual(kn.ascii_to_unicode("RÄ"), "ಖು");});
QUnit.test("u2a ಖೂ => RÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೂ"), "RÆ");});
QUnit.test("a2u RÆ => ಖೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("RÆ"), "ಖೂ");});
QUnit.test("u2a ಖೃ => RÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೃ"), "RÈ");});
QUnit.test("a2u RÈ => ಖೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("RÈ"), "ಖೃ");});
QUnit.test("u2a ಖೆ => SÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೆ"), "SÉ");});
QUnit.test("a2u SÉ => ಖೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÉ"), "ಖೆ");});
QUnit.test("u2a ಖೇ => SÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೇ"), "SÉÃ");});
QUnit.test("a2u SÉÃ => ಖೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÉÃ"), "ಖೇ");});
QUnit.test("u2a ಖೈ => SÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೈ"), "SÉÊ");});
QUnit.test("a2u SÉÊ => ಖೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÉÊ"), "ಖೈ");});
QUnit.test("u2a ಖೊ => SÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೊ"), "SÉÆ");});
QUnit.test("a2u SÉÆ => ಖೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÉÆ"), "ಖೊ");});
QUnit.test("u2a ಖೋ => SÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೋ"), "SÉÆÃ");});
QUnit.test("a2u SÉÆÃ => ಖೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SÉÆÃ"), "ಖೋ");});
QUnit.test("u2a ಖೌ => SË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಖೌ"), "SË");});
QUnit.test("a2u SË => ಖೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("SË"), "ಖೌ");});
QUnit.test("u2a ಗ್ => Uï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗ್"), "Uï");});
QUnit.test("a2u Uï => ಗ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("Uï"), "ಗ್");});
QUnit.test("u2a ಗ => UÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗ"), "UÀ");});
QUnit.test("a2u UÀ => ಗ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÀ"), "ಗ");});
QUnit.test("u2a ಗಾ => UÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗಾ"), "UÁ");});
QUnit.test("a2u UÁ => ಗಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÁ"), "ಗಾ");});
QUnit.test("u2a ಗಿ => V", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗಿ"), "V");});
QUnit.test("a2u V => ಗಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("V"), "ಗಿ");});
QUnit.test("u2a ಗೀ => VÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೀ"), "VÃ");});
QUnit.test("a2u VÃ => ಗೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("VÃ"), "ಗೀ");});
QUnit.test("u2a ಗು => UÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗು"), "UÀÄ");});
QUnit.test("a2u UÀÄ => ಗು", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÀÄ"), "ಗು");});
QUnit.test("u2a ಗೂ => UÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೂ"), "UÀÆ");});
QUnit.test("a2u UÀÆ => ಗೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÀÆ"), "ಗೂ");});
QUnit.test("u2a ಗೃ => UÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೃ"), "UÀÈ");});
QUnit.test("a2u UÀÈ => ಗೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÀÈ"), "ಗೃ");});
QUnit.test("u2a ಗೆ => UÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೆ"), "UÉ");});
QUnit.test("a2u UÉ => ಗೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÉ"), "ಗೆ");});
QUnit.test("u2a ಗೇ => UÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೇ"), "UÉÃ");});
QUnit.test("a2u UÉÃ => ಗೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÉÃ"), "ಗೇ");});
QUnit.test("u2a ಗೈ => UÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೈ"), "UÉÊ");});
QUnit.test("a2u UÉÊ => ಗೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÉÊ"), "ಗೈ");});
QUnit.test("u2a ಗೊ => UÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೊ"), "UÉÆ");});
QUnit.test("a2u UÉÆ => ಗೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÉÆ"), "ಗೊ");});
QUnit.test("u2a ಗೋ => UÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೋ"), "UÉÆÃ");});
QUnit.test("a2u UÉÆÃ => ಗೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UÉÆÃ"), "ಗೋ");});
QUnit.test("u2a ಗೌ => UË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಗೌ"), "UË");});
QUnit.test("a2u UË => ಗೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("UË"), "ಗೌ");});
QUnit.test("u2a ಘ್ => Wï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘ್"), "Wï");});
QUnit.test("a2u Wï => ಘ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("Wï"), "ಘ್");});
QUnit.test("u2a ಘ => WÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘ"), "WÀ");});
QUnit.test("a2u WÀ => ಘ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÀ"), "ಘ");});
QUnit.test("u2a ಘಾ => WÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘಾ"), "WÁ");});
QUnit.test("a2u WÁ => ಘಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÁ"), "ಘಾ");});
QUnit.test("u2a ಘಿ => X", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘಿ"), "X");});
QUnit.test("a2u X => ಘಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("X"), "ಘಿ");});
QUnit.test("u2a ಘೀ => XÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೀ"), "XÃ");});
QUnit.test("a2u XÃ => ಘೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("XÃ"), "ಘೀ");});
QUnit.test("u2a ಘು => WÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘು"), "WÀÄ");});
QUnit.test("a2u WÀÄ => ಘು", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÀÄ"), "ಘು");});
QUnit.test("u2a ಘೂ => WÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೂ"), "WÀÆ");});
QUnit.test("a2u WÀÆ => ಘೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÀÆ"), "ಘೂ");});
QUnit.test("u2a ಘೃ => WÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೃ"), "WÀÈ");});
QUnit.test("a2u WÀÈ => ಘೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÀÈ"), "ಘೃ");});
QUnit.test("u2a ಘೆ => WÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೆ"), "WÉ");});
QUnit.test("a2u WÉ => ಘೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÉ"), "ಘೆ");});
QUnit.test("u2a ಘೇ => WÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೇ"), "WÉÃ");});
QUnit.test("a2u WÉÃ => ಘೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÉÃ"), "ಘೇ");});
QUnit.test("u2a ಘೈ => WÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೈ"), "WÉÊ");});
QUnit.test("a2u WÉÊ => ಘೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÉÊ"), "ಘೈ");});
QUnit.test("u2a ಘೊ => WÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೊ"), "WÉÆ");});
QUnit.test("a2u WÉÆ => ಘೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÉÆ"), "ಘೊ");});
QUnit.test("u2a ಘೋ => WÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೋ"), "WÉÆÃ");});
QUnit.test("a2u WÉÆÃ => ಘೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WÉÆÃ"), "ಘೋ");});
QUnit.test("u2a ಘೌ => WË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಘೌ"), "WË");});
QUnit.test("a2u WË => ಘೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("WË"), "ಘೌ");});
QUnit.test("u2a ಚ್ => Zï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚ್"), "Zï");});
QUnit.test("a2u Zï => ಚ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("Zï"), "ಚ್");});
QUnit.test("u2a ಚ => ZÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚ"), "ZÀ");});
QUnit.test("a2u ZÀ => ಚ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÀ"), "ಚ");});
QUnit.test("u2a ಚಾ => ZÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚಾ"), "ZÁ");});
QUnit.test("a2u ZÁ => ಚಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÁ"), "ಚಾ");});
QUnit.test("u2a ಚಿ => a", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚಿ"), "a");});
QUnit.test("a2u a => ಚಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("a"), "ಚಿ");});
QUnit.test("u2a ಚೀ => aÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೀ"), "aÃ");});
QUnit.test("a2u aÃ => ಚೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("aÃ"), "ಚೀ");});
QUnit.test("u2a ಚು => ZÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚು"), "ZÀÄ");});
QUnit.test("a2u ZÀÄ => ಚು", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÀÄ"), "ಚು");});
QUnit.test("u2a ಚೂ => ZÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೂ"), "ZÀÆ");});
QUnit.test("a2u ZÀÆ => ಚೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÀÆ"), "ಚೂ");});
QUnit.test("u2a ಚೃ => ZÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೃ"), "ZÀÈ");});
QUnit.test("a2u ZÀÈ => ಚೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÀÈ"), "ಚೃ");});
QUnit.test("u2a ಚೆ => ZÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೆ"), "ZÉ");});
QUnit.test("a2u ZÉ => ಚೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÉ"), "ಚೆ");});
QUnit.test("u2a ಚೇ => ZÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೇ"), "ZÉÃ");});
QUnit.test("a2u ZÉÃ => ಚೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÉÃ"), "ಚೇ");});
QUnit.test("u2a ಚೈ => ZÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೈ"), "ZÉÊ");});
QUnit.test("a2u ZÉÊ => ಚೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÉÊ"), "ಚೈ");});
QUnit.test("u2a ಚೊ => ZÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೊ"), "ZÉÆ");});
QUnit.test("a2u ZÉÆ => ಚೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÉÆ"), "ಚೊ");});
QUnit.test("u2a ಚೋ => ZÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೋ"), "ZÉÆÃ");});
QUnit.test("a2u ZÉÆÃ => ಚೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZÉÆÃ"), "ಚೋ");});
QUnit.test("u2a ಚೌ => ZË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಚೌ"), "ZË");});
QUnit.test("a2u ZË => ಚೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ZË"), "ಚೌ");});
QUnit.test("u2a ಛ್ => bï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛ್"), "bï");});
QUnit.test("a2u bï => ಛ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("bï"), "ಛ್");});
QUnit.test("u2a ಛ => bÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛ"), "bÀ");});
QUnit.test("a2u bÀ => ಛ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÀ"), "ಛ");});
QUnit.test("u2a ಛಾ => bÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛಾ"), "bÁ");});
QUnit.test("a2u bÁ => ಛಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÁ"), "ಛಾ");});
QUnit.test("u2a ಛಿ => c", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛಿ"), "c");});
QUnit.test("a2u c => ಛಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("c"), "ಛಿ");});
QUnit.test("u2a ಛೀ => cÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೀ"), "cÃ");});
QUnit.test("a2u cÃ => ಛೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("cÃ"), "ಛೀ");});
QUnit.test("u2a ಛು => bÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛು"), "bÀÄ");});
QUnit.test("a2u bÀÄ => ಛು", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÀÄ"), "ಛು");});
QUnit.test("u2a ಛೂ => bÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೂ"), "bÀÆ");});
QUnit.test("a2u bÀÆ => ಛೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÀÆ"), "ಛೂ");});
QUnit.test("u2a ಛೃ => bÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೃ"), "bÀÈ");});
QUnit.test("a2u bÀÈ => ಛೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÀÈ"), "ಛೃ");});
QUnit.test("u2a ಛೆ => bÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೆ"), "bÉ");});
QUnit.test("a2u bÉ => ಛೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÉ"), "ಛೆ");});
QUnit.test("u2a ಛೇ => bÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೇ"), "bÉÃ");});
QUnit.test("a2u bÉÃ => ಛೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÉÃ"), "ಛೇ");});
QUnit.test("u2a ಛೈ => bÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೈ"), "bÉÊ");});
QUnit.test("a2u bÉÊ => ಛೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÉÊ"), "ಛೈ");});
QUnit.test("u2a ಛೊ => bÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೊ"), "bÉÆ");});
QUnit.test("a2u bÉÆ => ಛೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÉÆ"), "ಛೊ");});
QUnit.test("u2a ಛೋ => bÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೋ"), "bÉÆÃ");});
QUnit.test("a2u bÉÆÃ => ಛೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bÉÆÃ"), "ಛೋ");});
QUnit.test("u2a ಛೌ => bË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಛೌ"), "bË");});
QUnit.test("a2u bË => ಛೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("bË"), "ಛೌ");});
QUnit.test("u2a ಜ್ => eï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜ್"), "eï");});
QUnit.test("a2u eï => ಜ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("eï"), "ಜ್");});
QUnit.test("u2a ಜ => d", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜ"), "d");});
QUnit.test("a2u d => ಜ", function(assert){assert.strictEqual(kn.ascii_to_unicode("d"), "ಜ");});
QUnit.test("u2a ಜಾ => eÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜಾ"), "eÁ");});
QUnit.test("a2u eÁ => ಜಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÁ"), "ಜಾ");});
QUnit.test("u2a ಜಿ => f", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜಿ"), "f");});
QUnit.test("a2u f => ಜಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("f"), "ಜಿ");});
QUnit.test("u2a ಜೀ => fÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೀ"), "fÃ");});
QUnit.test("a2u fÃ => ಜೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("fÃ"), "ಜೀ");});
QUnit.test("u2a ಜು => dÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜು"), "dÄ");});
QUnit.test("a2u dÄ => ಜು", function(assert){assert.strictEqual(kn.ascii_to_unicode("dÄ"), "ಜು");});
QUnit.test("u2a ಜೂ => dÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೂ"), "dÆ");});
QUnit.test("a2u dÆ => ಜೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("dÆ"), "ಜೂ");});
QUnit.test("u2a ಜೃ => dÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೃ"), "dÈ");});
QUnit.test("a2u dÈ => ಜೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("dÈ"), "ಜೃ");});
QUnit.test("u2a ಜೆ => eÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೆ"), "eÉ");});
QUnit.test("a2u eÉ => ಜೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÉ"), "ಜೆ");});
QUnit.test("u2a ಜೇ => eÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೇ"), "eÉÃ");});
QUnit.test("a2u eÉÃ => ಜೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÉÃ"), "ಜೇ");});
QUnit.test("u2a ಜೈ => eÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೈ"), "eÉÊ");});
QUnit.test("a2u eÉÊ => ಜೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÉÊ"), "ಜೈ");});
QUnit.test("u2a ಜೊ => eÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೊ"), "eÉÆ");});
QUnit.test("a2u eÉÆ => ಜೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÉÆ"), "ಜೊ");});
QUnit.test("u2a ಜೋ => eÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೋ"), "eÉÆÃ");});
QUnit.test("a2u eÉÆÃ => ಜೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eÉÆÃ"), "ಜೋ");});
QUnit.test("u2a ಜೌ => eË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಜೌ"), "eË");});
QUnit.test("a2u eË => ಜೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("eË"), "ಜೌ");});
QUnit.test("u2a ಝ್ => gÀhiï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝ್"), "gÀhiï");});
QUnit.test("a2u gÀhiï => ಝ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhiï"), "ಝ್");});
QUnit.test("u2a ಝ => gÀhÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝ"), "gÀhÄ");});
QUnit.test("a2u gÀhÄ => ಝ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhÄ"), "ಝ");});
QUnit.test("u2a ಝಾ => gÀhiÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝಾ"), "gÀhiÁ");});
QUnit.test("a2u gÀhiÁ => ಝಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhiÁ"), "ಝಾ");});
QUnit.test("u2a ಝಿ => jhÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝಿ"), "jhÄ");});
QUnit.test("a2u jhÄ => ಝಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("jhÄ"), "ಝಿ");});
QUnit.test("u2a ಝೀ => jhÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೀ"), "jhÄÃ");});
QUnit.test("a2u jhÄÃ => ಝೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("jhÄÃ"), "ಝೀ");});
QUnit.test("u2a ಝು => gÀhÄÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝು"), "gÀhÄÄ");});
QUnit.test("a2u gÀhÄÄ => ಝು", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhÄÄ"), "ಝು");});
QUnit.test("u2a ಝೂ => gÀhÄÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೂ"), "gÀhÄÆ");});
QUnit.test("a2u gÀhÄÆ => ಝೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhÄÆ"), "ಝೂ");});
QUnit.test("u2a ಝೃ => gÀhÄÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೃ"), "gÀhÄÈ");});
QUnit.test("a2u gÀhÄÈ => ಝೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhÄÈ"), "ಝೃ");});
QUnit.test("u2a ಝೆ => gÉhÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೆ"), "gÉhÄ");});
QUnit.test("a2u gÉhÄ => ಝೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉhÄ"), "ಝೆ");});
QUnit.test("u2a ಝೇ => gÉhÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೇ"), "gÉhÄÃ");});
QUnit.test("a2u gÉhÄÃ => ಝೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉhÄÃ"), "ಝೇ");});
QUnit.test("u2a ಝೈ => gÉhÄÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೈ"), "gÉhÄÊ");});
QUnit.test("a2u gÉhÄÊ => ಝೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉhÄÊ"), "ಝೈ");});
QUnit.test("u2a ಝೊ => gÉhÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೊ"), "gÉhÆ");});
QUnit.test("a2u gÉhÆ => ಝೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉhÆ"), "ಝೊ");});
QUnit.test("u2a ಝೋ => gÉhÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೋ"), "gÉhÆÃ");});
QUnit.test("a2u gÉhÆÃ => ಝೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉhÆÃ"), "ಝೋ");});
QUnit.test("u2a ಝೌ => gÀhiË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಝೌ"), "gÀhiË");});
QUnit.test("a2u gÀhiË => ಝೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀhiË"), "ಝೌ");});
QUnit.test("u2a ಟ್ => mï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟ್"), "mï");});
QUnit.test("a2u mï => ಟ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("mï"), "ಟ್");});
QUnit.test("u2a ಟ => l", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟ"), "l");});
QUnit.test("a2u l => ಟ", function(assert){assert.strictEqual(kn.ascii_to_unicode("l"), "ಟ");});
QUnit.test("u2a ಟಾ => mÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟಾ"), "mÁ");});
QUnit.test("a2u mÁ => ಟಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÁ"), "ಟಾ");});
QUnit.test("u2a ಟಿ => n", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟಿ"), "n");});
QUnit.test("a2u n => ಟಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("n"), "ಟಿ");});
QUnit.test("u2a ಟೀ => nÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೀ"), "nÃ");});
QUnit.test("a2u nÃ => ಟೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("nÃ"), "ಟೀ");});
QUnit.test("u2a ಟು => lÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟು"), "lÄ");});
QUnit.test("a2u lÄ => ಟು", function(assert){assert.strictEqual(kn.ascii_to_unicode("lÄ"), "ಟು");});
QUnit.test("u2a ಟೂ => lÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೂ"), "lÆ");});
QUnit.test("a2u lÆ => ಟೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("lÆ"), "ಟೂ");});
QUnit.test("u2a ಟೃ => lÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೃ"), "lÈ");});
QUnit.test("a2u lÈ => ಟೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("lÈ"), "ಟೃ");});
QUnit.test("u2a ಟೆ => mÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೆ"), "mÉ");});
QUnit.test("a2u mÉ => ಟೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÉ"), "ಟೆ");});
QUnit.test("u2a ಟೇ => mÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೇ"), "mÉÃ");});
QUnit.test("a2u mÉÃ => ಟೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÉÃ"), "ಟೇ");});
QUnit.test("u2a ಟೈ => mÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೈ"), "mÉÊ");});
QUnit.test("a2u mÉÊ => ಟೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÉÊ"), "ಟೈ");});
QUnit.test("u2a ಟೊ => mÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೊ"), "mÉÆ");});
QUnit.test("a2u mÉÆ => ಟೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÉÆ"), "ಟೊ");});
QUnit.test("u2a ಟೋ => mÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೋ"), "mÉÆÃ");});
QUnit.test("a2u mÉÆÃ => ಟೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mÉÆÃ"), "ಟೋ");});
QUnit.test("u2a ಟೌ => mË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಟೌ"), "mË");});
QUnit.test("a2u mË => ಟೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("mË"), "ಟೌ");});
QUnit.test("u2a ಠ್ => oï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠ್"), "oï");});
QUnit.test("a2u oï => ಠ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("oï"), "ಠ್");});
QUnit.test("u2a ಠ => oÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠ"), "oÀ");});
QUnit.test("a2u oÀ => ಠ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÀ"), "ಠ");});
QUnit.test("u2a ಠಾ => oÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠಾ"), "oÁ");});
QUnit.test("a2u oÁ => ಠಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÁ"), "ಠಾ");});
QUnit.test("u2a ಠಿ => p", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠಿ"), "p");});
QUnit.test("a2u p => ಠಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("p"), "ಠಿ");});
QUnit.test("u2a ಠೀ => pÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೀ"), "pÃ");});
QUnit.test("a2u pÃ => ಠೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("pÃ"), "ಠೀ");});
QUnit.test("u2a ಠು => oÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠು"), "oÀÄ");});
QUnit.test("a2u oÀÄ => ಠು", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÀÄ"), "ಠು");});
QUnit.test("u2a ಠೂ => oÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೂ"), "oÀÆ");});
QUnit.test("a2u oÀÆ => ಠೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÀÆ"), "ಠೂ");});
QUnit.test("u2a ಠೃ => oÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೃ"), "oÀÈ");});
QUnit.test("a2u oÀÈ => ಠೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÀÈ"), "ಠೃ");});
QUnit.test("u2a ಠೆ => oÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೆ"), "oÉ");});
QUnit.test("a2u oÉ => ಠೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÉ"), "ಠೆ");});
QUnit.test("u2a ಠೇ => oÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೇ"), "oÉÃ");});
QUnit.test("a2u oÉÃ => ಠೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÉÃ"), "ಠೇ");});
QUnit.test("u2a ಠೈ => oÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೈ"), "oÉÊ");});
QUnit.test("a2u oÉÊ => ಠೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÉÊ"), "ಠೈ");});
QUnit.test("u2a ಠೊ => oÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೊ"), "oÉÆ");});
QUnit.test("a2u oÉÆ => ಠೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÉÆ"), "ಠೊ");});
QUnit.test("u2a ಠೋ => oÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೋ"), "oÉÆÃ");});
QUnit.test("a2u oÉÆÃ => ಠೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oÉÆÃ"), "ಠೋ");});
QUnit.test("u2a ಠೌ => oË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಠೌ"), "oË");});
QUnit.test("a2u oË => ಠೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("oË"), "ಠೌ");});
QUnit.test("u2a ಡ್ => qï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡ್"), "qï");});
QUnit.test("a2u qï => ಡ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("qï"), "ಡ್");});
QUnit.test("u2a ಡ => qÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡ"), "qÀ");});
QUnit.test("a2u qÀ => ಡ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÀ"), "ಡ");});
QUnit.test("u2a ಡಾ => qÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡಾ"), "qÁ");});
QUnit.test("a2u qÁ => ಡಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÁ"), "ಡಾ");});
QUnit.test("u2a ಡಿ => r", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡಿ"), "r");});
QUnit.test("a2u r => ಡಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("r"), "ಡಿ");});
QUnit.test("u2a ಡೀ => rÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೀ"), "rÃ");});
QUnit.test("a2u rÃ => ಡೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("rÃ"), "ಡೀ");});
QUnit.test("u2a ಡು => qÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡು"), "qÀÄ");});
QUnit.test("a2u qÀÄ => ಡು", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÀÄ"), "ಡು");});
QUnit.test("u2a ಡೂ => qÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೂ"), "qÀÆ");});
QUnit.test("a2u qÀÆ => ಡೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÀÆ"), "ಡೂ");});
QUnit.test("u2a ಡೃ => qÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೃ"), "qÀÈ");});
QUnit.test("a2u qÀÈ => ಡೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÀÈ"), "ಡೃ");});
QUnit.test("u2a ಡೆ => qÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೆ"), "qÉ");});
QUnit.test("a2u qÉ => ಡೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÉ"), "ಡೆ");});
QUnit.test("u2a ಡೇ => qÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೇ"), "qÉÃ");});
QUnit.test("a2u qÉÃ => ಡೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÉÃ"), "ಡೇ");});
QUnit.test("u2a ಡೈ => qÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೈ"), "qÉÊ");});
QUnit.test("a2u qÉÊ => ಡೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÉÊ"), "ಡೈ");});
QUnit.test("u2a ಡೊ => qÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೊ"), "qÉÆ");});
QUnit.test("a2u qÉÆ => ಡೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÉÆ"), "ಡೊ");});
QUnit.test("u2a ಡೋ => qÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೋ"), "qÉÆÃ");});
QUnit.test("a2u qÉÆÃ => ಡೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qÉÆÃ"), "ಡೋ");});
QUnit.test("u2a ಡೌ => qË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಡೌ"), "qË");});
QUnit.test("a2u qË => ಡೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qË"), "ಡೌ");});
QUnit.test("u2a ಢ್ => qsï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢ್"), "qsï");});
QUnit.test("a2u qsï => ಢ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsï"), "ಢ್");});
QUnit.test("u2a ಢ => qsÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢ"), "qsÀ");});
QUnit.test("a2u qsÀ => ಢ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÀ"), "ಢ");});
QUnit.test("u2a ಢಾ => qsÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢಾ"), "qsÁ");});
QUnit.test("a2u qsÁ => ಢಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÁ"), "ಢಾ");});
QUnit.test("u2a ಢಿ => rü", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢಿ"), "rü");});
QUnit.test("a2u rü => ಢಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("rü"), "ಢಿ");});
QUnit.test("u2a ಢೀ => rüÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೀ"), "rüÃ");});
QUnit.test("a2u rüÃ => ಢೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("rüÃ"), "ಢೀ");});
QUnit.test("u2a ಢು => qsÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢು"), "qsÀÄ");});
QUnit.test("a2u qsÀÄ => ಢು", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÀÄ"), "ಢು");});
QUnit.test("u2a ಢೂ => qsÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೂ"), "qsÀÆ");});
QUnit.test("a2u qsÀÆ => ಢೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÀÆ"), "ಢೂ");});
QUnit.test("u2a ಢೃ => qsÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೃ"), "qsÀÈ");});
QUnit.test("a2u qsÀÈ => ಢೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÀÈ"), "ಢೃ");});
QUnit.test("u2a ಢೆ => qsÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೆ"), "qsÉ");});
QUnit.test("a2u qsÉ => ಢೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÉ"), "ಢೆ");});
QUnit.test("u2a ಢೇ => qsÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೇ"), "qsÉÃ");});
QUnit.test("a2u qsÉÃ => ಢೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÉÃ"), "ಢೇ");});
QUnit.test("u2a ಢೈ => qsÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೈ"), "qsÉÊ");});
QUnit.test("a2u qsÉÊ => ಢೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÉÊ"), "ಢೈ");});
QUnit.test("u2a ಢೊ => qsÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೊ"), "qsÉÆ");});
QUnit.test("a2u qsÉÆ => ಢೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÉÆ"), "ಢೊ");});
QUnit.test("u2a ಢೋ => qsÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೋ"), "qsÉÆÃ");});
QUnit.test("a2u qsÉÆÃ => ಢೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsÉÆÃ"), "ಢೋ");});
QUnit.test("u2a ಢೌ => qsË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಢೌ"), "qsË");});
QUnit.test("a2u qsË => ಢೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("qsË"), "ಢೌ");});
QUnit.test("u2a ಣ್ => uï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣ್"), "uï");});
QUnit.test("a2u uï => ಣ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("uï"), "ಣ್");});
QUnit.test("u2a ಣ => t", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣ"), "t");});
QUnit.test("a2u t => ಣ", function(assert){assert.strictEqual(kn.ascii_to_unicode("t"), "ಣ");});
QUnit.test("u2a ಣಾ => uÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣಾ"), "uÁ");});
QUnit.test("a2u uÁ => ಣಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÁ"), "ಣಾ");});
QUnit.test("u2a ಣಿ => tÂ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣಿ"), "tÂ");});
QUnit.test("a2u tÂ => ಣಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("tÂ"), "ಣಿ");});
QUnit.test("u2a ಣೀ => tÂÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೀ"), "tÂÃ");});
QUnit.test("a2u tÂÃ => ಣೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("tÂÃ"), "ಣೀ");});
QUnit.test("u2a ಣು => tÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣು"), "tÄ");});
QUnit.test("a2u tÄ => ಣು", function(assert){assert.strictEqual(kn.ascii_to_unicode("tÄ"), "ಣು");});
QUnit.test("u2a ಣೂ => tÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೂ"), "tÆ");});
QUnit.test("a2u tÆ => ಣೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("tÆ"), "ಣೂ");});
QUnit.test("u2a ಣೃ => tÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೃ"), "tÈ");});
QUnit.test("a2u tÈ => ಣೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("tÈ"), "ಣೃ");});
QUnit.test("u2a ಣೆ => uÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೆ"), "uÉ");});
QUnit.test("a2u uÉ => ಣೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÉ"), "ಣೆ");});
QUnit.test("u2a ಣೇ => uÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೇ"), "uÉÃ");});
QUnit.test("a2u uÉÃ => ಣೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÉÃ"), "ಣೇ");});
QUnit.test("u2a ಣೈ => uÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೈ"), "uÉÊ");});
QUnit.test("a2u uÉÊ => ಣೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÉÊ"), "ಣೈ");});
QUnit.test("u2a ಣೊ => uÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೊ"), "uÉÆ");});
QUnit.test("a2u uÉÆ => ಣೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÉÆ"), "ಣೊ");});
QUnit.test("u2a ಣೋ => uÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೋ"), "uÉÆÃ");});
QUnit.test("a2u uÉÆÃ => ಣೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uÉÆÃ"), "ಣೋ");});
QUnit.test("u2a ಣೌ => uË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಣೌ"), "uË");});
QUnit.test("a2u uË => ಣೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("uË"), "ಣೌ");});
QUnit.test("u2a ತ್ => vï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತ್"), "vï");});
QUnit.test("a2u vï => ತ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("vï"), "ತ್");});
QUnit.test("u2a ತ => vÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತ"), "vÀ");});
QUnit.test("a2u vÀ => ತ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÀ"), "ತ");});
QUnit.test("u2a ತಾ => vÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತಾ"), "vÁ");});
QUnit.test("a2u vÁ => ತಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÁ"), "ತಾ");});
QUnit.test("u2a ತಿ => w", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತಿ"), "w");});
QUnit.test("a2u w => ತಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("w"), "ತಿ");});
QUnit.test("u2a ತೀ => wÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೀ"), "wÃ");});
QUnit.test("a2u wÃ => ತೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("wÃ"), "ತೀ");});
QUnit.test("u2a ತು => vÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತು"), "vÀÄ");});
QUnit.test("a2u vÀÄ => ತು", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÀÄ"), "ತು");});
QUnit.test("u2a ತೂ => vÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೂ"), "vÀÆ");});
QUnit.test("a2u vÀÆ => ತೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÀÆ"), "ತೂ");});
QUnit.test("u2a ತೃ => vÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೃ"), "vÀÈ");});
QUnit.test("a2u vÀÈ => ತೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÀÈ"), "ತೃ");});
QUnit.test("u2a ತೆ => vÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೆ"), "vÉ");});
QUnit.test("a2u vÉ => ತೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÉ"), "ತೆ");});
QUnit.test("u2a ತೇ => vÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೇ"), "vÉÃ");});
QUnit.test("a2u vÉÃ => ತೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÉÃ"), "ತೇ");});
QUnit.test("u2a ತೈ => vÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೈ"), "vÉÊ");});
QUnit.test("a2u vÉÊ => ತೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÉÊ"), "ತೈ");});
QUnit.test("u2a ತೊ => vÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೊ"), "vÉÆ");});
QUnit.test("a2u vÉÆ => ತೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÉÆ"), "ತೊ");});
QUnit.test("u2a ತೋ => vÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೋ"), "vÉÆÃ");});
QUnit.test("a2u vÉÆÃ => ತೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vÉÆÃ"), "ತೋ");});
QUnit.test("u2a ತೌ => vË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ತೌ"), "vË");});
QUnit.test("a2u vË => ತೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("vË"), "ತೌ");});
QUnit.test("u2a ಥ್ => xï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥ್"), "xï");});
QUnit.test("a2u xï => ಥ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("xï"), "ಥ್");});
QUnit.test("u2a ಥ => xÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥ"), "xÀ");});
QUnit.test("a2u xÀ => ಥ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÀ"), "ಥ");});
QUnit.test("u2a ಥಾ => xÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥಾ"), "xÁ");});
QUnit.test("a2u xÁ => ಥಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÁ"), "ಥಾ");});
QUnit.test("u2a ಥಿ => y", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥಿ"), "y");});
QUnit.test("a2u y => ಥಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("y"), "ಥಿ");});
QUnit.test("u2a ಥೀ => yÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೀ"), "yÃ");});
QUnit.test("a2u yÃ => ಥೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("yÃ"), "ಥೀ");});
QUnit.test("u2a ಥು => xÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥು"), "xÀÄ");});
QUnit.test("a2u xÀÄ => ಥು", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÀÄ"), "ಥು");});
QUnit.test("u2a ಥೂ => xÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೂ"), "xÀÆ");});
QUnit.test("a2u xÀÆ => ಥೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÀÆ"), "ಥೂ");});
QUnit.test("u2a ಥೃ => xÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೃ"), "xÀÈ");});
QUnit.test("a2u xÀÈ => ಥೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÀÈ"), "ಥೃ");});
QUnit.test("u2a ಥೆ => xÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೆ"), "xÉ");});
QUnit.test("a2u xÉ => ಥೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÉ"), "ಥೆ");});
QUnit.test("u2a ಥೇ => xÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೇ"), "xÉÃ");});
QUnit.test("a2u xÉÃ => ಥೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÉÃ"), "ಥೇ");});
QUnit.test("u2a ಥೈ => xÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೈ"), "xÉÊ");});
QUnit.test("a2u xÉÊ => ಥೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÉÊ"), "ಥೈ");});
QUnit.test("u2a ಥೊ => xÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೊ"), "xÉÆ");});
QUnit.test("a2u xÉÆ => ಥೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÉÆ"), "ಥೊ");});
QUnit.test("u2a ಥೋ => xÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೋ"), "xÉÆÃ");});
QUnit.test("a2u xÉÆÃ => ಥೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xÉÆÃ"), "ಥೋ");});
QUnit.test("u2a ಥೌ => xË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಥೌ"), "xË");});
QUnit.test("a2u xË => ಥೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("xË"), "ಥೌ");});
QUnit.test("u2a ದ್ => zï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದ್"), "zï");});
QUnit.test("a2u zï => ದ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("zï"), "ದ್");});
QUnit.test("u2a ದ => zÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದ"), "zÀ");});
QUnit.test("a2u zÀ => ದ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÀ"), "ದ");});
QUnit.test("u2a ದಾ => zÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದಾ"), "zÁ");});
QUnit.test("a2u zÁ => ದಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÁ"), "ದಾ");});
QUnit.test("u2a ದಿ => ¢", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದಿ"), "¢");});
QUnit.test("a2u ¢ => ದಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¢"), "ದಿ");});
QUnit.test("u2a ದೀ => ¢Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೀ"), "¢Ã");});
QUnit.test("a2u ¢Ã => ದೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¢Ã"), "ದೀ");});
QUnit.test("u2a ದು => zÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದು"), "zÀÄ");});
QUnit.test("a2u zÀÄ => ದು", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÀÄ"), "ದು");});
QUnit.test("u2a ದೂ => zÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೂ"), "zÀÆ");});
QUnit.test("a2u zÀÆ => ದೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÀÆ"), "ದೂ");});
QUnit.test("u2a ದೃ => zÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೃ"), "zÀÈ");});
QUnit.test("a2u zÀÈ => ದೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÀÈ"), "ದೃ");});
QUnit.test("u2a ದೆ => zÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೆ"), "zÉ");});
QUnit.test("a2u zÉ => ದೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÉ"), "ದೆ");});
QUnit.test("u2a ದೇ => zÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೇ"), "zÉÃ");});
QUnit.test("a2u zÉÃ => ದೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÉÃ"), "ದೇ");});
QUnit.test("u2a ದೈ => zÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೈ"), "zÉÊ");});
QUnit.test("a2u zÉÊ => ದೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÉÊ"), "ದೈ");});
QUnit.test("u2a ದೊ => zÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೊ"), "zÉÆ");});
QUnit.test("a2u zÉÆ => ದೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÉÆ"), "ದೊ");});
QUnit.test("u2a ದೋ => zÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೋ"), "zÉÆÃ");});
QUnit.test("a2u zÉÆÃ => ದೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zÉÆÃ"), "ದೋ");});
QUnit.test("u2a ದೌ => zË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ದೌ"), "zË");});
QUnit.test("a2u zË => ದೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zË"), "ದೌ");});
QUnit.test("u2a ಧ್ => zsï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧ್"), "zsï");});
QUnit.test("a2u zsï => ಧ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsï"), "ಧ್");});
QUnit.test("u2a ಧ => zsÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧ"), "zsÀ");});
QUnit.test("a2u zsÀ => ಧ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÀ"), "ಧ");});
QUnit.test("u2a ಧಾ => zsÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧಾ"), "zsÁ");});
QUnit.test("a2u zsÁ => ಧಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÁ"), "ಧಾ");});
QUnit.test("u2a ಧಿ => ¢ü", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧಿ"), "¢ü");});
QUnit.test("a2u ¢ü => ಧಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¢ü"), "ಧಿ");});
QUnit.test("u2a ಧೀ => ¢üÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೀ"), "¢üÃ");});
QUnit.test("a2u ¢üÃ => ಧೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¢üÃ"), "ಧೀ");});
QUnit.test("u2a ಧು => zsÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧು"), "zsÀÄ");});
QUnit.test("a2u zsÀÄ => ಧು", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÀÄ"), "ಧು");});
QUnit.test("u2a ಧೂ => zsÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೂ"), "zsÀÆ");});
QUnit.test("a2u zsÀÆ => ಧೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÀÆ"), "ಧೂ");});
QUnit.test("u2a ಧೃ => zsÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೃ"), "zsÀÈ");});
QUnit.test("a2u zsÀÈ => ಧೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÀÈ"), "ಧೃ");});
QUnit.test("u2a ಧೆ => zsÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೆ"), "zsÉ");});
QUnit.test("a2u zsÉ => ಧೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÉ"), "ಧೆ");});
QUnit.test("u2a ಧೇ => zsÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೇ"), "zsÉÃ");});
QUnit.test("a2u zsÉÃ => ಧೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÉÃ"), "ಧೇ");});
QUnit.test("u2a ಧೈ => zsÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೈ"), "zsÉÊ");});
QUnit.test("a2u zsÉÊ => ಧೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÉÊ"), "ಧೈ");});
QUnit.test("u2a ಧೊ => zsÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೊ"), "zsÉÆ");});
QUnit.test("a2u zsÉÆ => ಧೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÉÆ"), "ಧೊ");});
QUnit.test("u2a ಧೋ => zsÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೋ"), "zsÉÆÃ");});
QUnit.test("a2u zsÉÆÃ => ಧೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsÉÆÃ"), "ಧೋ");});
QUnit.test("u2a ಧೌ => zsË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಧೌ"), "zsË");});
QUnit.test("a2u zsË => ಧೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("zsË"), "ಧೌ");});
QUnit.test("u2a ನ್ => £ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನ್"), "£ï");});
QUnit.test("a2u £ï => ನ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ï"), "ನ್");});
QUnit.test("u2a ನ => £À", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನ"), "£À");});
QUnit.test("a2u £À => ನ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£À"), "ನ");});
QUnit.test("u2a ನಾ => £Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನಾ"), "£Á");});
QUnit.test("a2u £Á => ನಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£Á"), "ನಾ");});
QUnit.test("u2a ನಿ => ¤", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನಿ"), "¤");});
QUnit.test("a2u ¤ => ನಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¤"), "ನಿ");});
QUnit.test("u2a ನೀ => ¤Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೀ"), "¤Ã");});
QUnit.test("a2u ¤Ã => ನೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¤Ã"), "ನೀ");});
QUnit.test("u2a ನು => £ÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನು"), "£ÀÄ");});
QUnit.test("a2u £ÀÄ => ನು", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÀÄ"), "ನು");});
QUnit.test("u2a ನೂ => £ÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೂ"), "£ÀÆ");});
QUnit.test("a2u £ÀÆ => ನೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÀÆ"), "ನೂ");});
QUnit.test("u2a ನೃ => £ÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೃ"), "£ÀÈ");});
QUnit.test("a2u £ÀÈ => ನೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÀÈ"), "ನೃ");});
QUnit.test("u2a ನೆ => £É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೆ"), "£É");});
QUnit.test("a2u £É => ನೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£É"), "ನೆ");});
QUnit.test("u2a ನೇ => £ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೇ"), "£ÉÃ");});
QUnit.test("a2u £ÉÃ => ನೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÉÃ"), "ನೇ");});
QUnit.test("u2a ನೈ => £ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೈ"), "£ÉÊ");});
QUnit.test("a2u £ÉÊ => ನೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÉÊ"), "ನೈ");});
QUnit.test("u2a ನೊ => £ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೊ"), "£ÉÆ");});
QUnit.test("a2u £ÉÆ => ನೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÉÆ"), "ನೊ");});
QUnit.test("u2a ನೋ => £ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೋ"), "£ÉÆÃ");});
QUnit.test("a2u £ÉÆÃ => ನೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£ÉÆÃ"), "ನೋ");});
QUnit.test("u2a ನೌ => £Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ನೌ"), "£Ë");});
QUnit.test("a2u £Ë => ನೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("£Ë"), "ನೌ");});
QUnit.test("u2a ಪ್ => ¥ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪ್"), "¥ï");});
QUnit.test("a2u ¥ï => ಪ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ï"), "ಪ್");});
QUnit.test("u2a ಪ => ¥À", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪ"), "¥À");});
QUnit.test("a2u ¥À => ಪ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥À"), "ಪ");});
QUnit.test("u2a ಪಾ => ¥Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪಾ"), "¥Á");});
QUnit.test("a2u ¥Á => ಪಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥Á"), "ಪಾ");});
QUnit.test("u2a ಪಿ => ¦", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪಿ"), "¦");});
QUnit.test("a2u ¦ => ಪಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¦"), "ಪಿ");});
QUnit.test("u2a ಪೀ => ¦Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೀ"), "¦Ã");});
QUnit.test("a2u ¦Ã => ಪೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¦Ã"), "ಪೀ");});
QUnit.test("u2a ಪು => ¥ÀÅ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪು"), "¥ÀÅ");});
QUnit.test("a2u ¥ÀÅ => ಪು", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÀÅ"), "ಪು");});
QUnit.test("u2a ಪೂ => ¥ÀÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೂ"), "¥ÀÇ");});
QUnit.test("a2u ¥ÀÇ => ಪೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÀÇ"), "ಪೂ");});
QUnit.test("u2a ಪೃ => ¥ÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೃ"), "¥ÀÈ");});
QUnit.test("a2u ¥ÀÈ => ಪೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÀÈ"), "ಪೃ");});
QUnit.test("u2a ಪೆ => ¥É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೆ"), "¥É");});
QUnit.test("a2u ¥É => ಪೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥É"), "ಪೆ");});
QUnit.test("u2a ಪೇ => ¥ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೇ"), "¥ÉÃ");});
QUnit.test("a2u ¥ÉÃ => ಪೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÉÃ"), "ಪೇ");});
QUnit.test("u2a ಪೈ => ¥ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೈ"), "¥ÉÊ");});
QUnit.test("a2u ¥ÉÊ => ಪೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÉÊ"), "ಪೈ");});
QUnit.test("u2a ಪೊ => ¥ÉÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೊ"), "¥ÉÇ");});
QUnit.test("a2u ¥ÉÇ => ಪೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÉÇ"), "ಪೊ");});
QUnit.test("u2a ಪೋ => ¥ÉÇÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೋ"), "¥ÉÇÃ");});
QUnit.test("a2u ¥ÉÇÃ => ಪೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥ÉÇÃ"), "ಪೋ");});
QUnit.test("u2a ಪೌ => ¥Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಪೌ"), "¥Ë");});
QUnit.test("a2u ¥Ë => ಪೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥Ë"), "ಪೌ");});
QUnit.test("u2a ಫ್ => ¥sï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫ್"), "¥sï");});
QUnit.test("a2u ¥sï => ಫ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sï"), "ಫ್");});
QUnit.test("u2a ಫ => ¥sÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫ"), "¥sÀ");});
QUnit.test("a2u ¥sÀ => ಫ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÀ"), "ಫ");});
QUnit.test("u2a ಫಾ => ¥sÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫಾ"), "¥sÁ");});
QUnit.test("a2u ¥sÁ => ಫಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÁ"), "ಫಾ");});
QUnit.test("u2a ಫಿ => ¦ü", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫಿ"), "¦ü");});
QUnit.test("a2u ¦ü => ಫಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¦ü"), "ಫಿ");});
QUnit.test("u2a ಫೀ => ¦üÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೀ"), "¦üÃ");});
QUnit.test("a2u ¦üÃ => ಫೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¦üÃ"), "ಫೀ");});
QUnit.test("u2a ಫು => ¥sÀÅ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫು"), "¥sÀÅ");});
QUnit.test("a2u ¥sÀÅ => ಫು", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÀÅ"), "ಫು");});
QUnit.test("u2a ಫೂ => ¥sÀÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೂ"), "¥sÀÇ");});
QUnit.test("a2u ¥sÀÇ => ಫೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÀÇ"), "ಫೂ");});
QUnit.test("u2a ಫೃ => ¥sÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೃ"), "¥sÀÈ");});
QUnit.test("a2u ¥sÀÈ => ಫೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÀÈ"), "ಫೃ");});
QUnit.test("u2a ಫೆ => ¥sÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೆ"), "¥sÉ");});
QUnit.test("a2u ¥sÉ => ಫೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÉ"), "ಫೆ");});
QUnit.test("u2a ಫೇ => ¥sÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೇ"), "¥sÉÃ");});
QUnit.test("a2u ¥sÉÃ => ಫೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÉÃ"), "ಫೇ");});
QUnit.test("u2a ಫೈ => ¥sÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೈ"), "¥sÉÊ");});
QUnit.test("a2u ¥sÉÊ => ಫೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÉÊ"), "ಫೈ");});
QUnit.test("u2a ಫೊ => ¥sÉÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೊ"), "¥sÉÇ");});
QUnit.test("a2u ¥sÉÇ => ಫೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÉÇ"), "ಫೊ");});
QUnit.test("u2a ಫೋ => ¥sÉÇÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೋ"), "¥sÉÇÃ");});
QUnit.test("a2u ¥sÉÇÃ => ಫೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sÉÇÃ"), "ಫೋ");});
QUnit.test("u2a ಫೌ => ¥sË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಫೌ"), "¥sË");});
QUnit.test("a2u ¥sË => ಫೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¥sË"), "ಫೌ");});
QUnit.test("u2a ಬ್ => ¨ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬ್"), "¨ï");});
QUnit.test("a2u ¨ï => ಬ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨ï"), "ಬ್");});
QUnit.test("u2a ಬ => §", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬ"), "§");});
QUnit.test("a2u § => ಬ", function(assert){assert.strictEqual(kn.ascii_to_unicode("§"), "ಬ");});
QUnit.test("u2a ಬಾ => ¨Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬಾ"), "¨Á");});
QUnit.test("a2u ¨Á => ಬಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨Á"), "ಬಾ");});
QUnit.test("u2a ಬಿ => ©", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬಿ"), "©");});
QUnit.test("a2u © => ಬಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("©"), "ಬಿ");});
QUnit.test("u2a ಬೀ => ©Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೀ"), "©Ã");});
QUnit.test("a2u ©Ã => ಬೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("©Ã"), "ಬೀ");});
QUnit.test("u2a ಬು => §Ä", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬು"), "§Ä");});
QUnit.test("a2u §Ä => ಬು", function(assert){assert.strictEqual(kn.ascii_to_unicode("§Ä"), "ಬು");});
QUnit.test("u2a ಬೂ => §Æ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೂ"), "§Æ");});
QUnit.test("a2u §Æ => ಬೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("§Æ"), "ಬೂ");});
QUnit.test("u2a ಬೃ => §È", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೃ"), "§È");});
QUnit.test("a2u §È => ಬೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("§È"), "ಬೃ");});
QUnit.test("u2a ಬೆ => ¨É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೆ"), "¨É");});
QUnit.test("a2u ¨É => ಬೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨É"), "ಬೆ");});
QUnit.test("u2a ಬೇ => ¨ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೇ"), "¨ÉÃ");});
QUnit.test("a2u ¨ÉÃ => ಬೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨ÉÃ"), "ಬೇ");});
QUnit.test("u2a ಬೈ => ¨ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೈ"), "¨ÉÊ");});
QUnit.test("a2u ¨ÉÊ => ಬೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨ÉÊ"), "ಬೈ");});
QUnit.test("u2a ಬೊ => ¨ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೊ"), "¨ÉÆ");});
QUnit.test("a2u ¨ÉÆ => ಬೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨ÉÆ"), "ಬೊ");});
QUnit.test("u2a ಬೋ => ¨ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೋ"), "¨ÉÆÃ");});
QUnit.test("a2u ¨ÉÆÃ => ಬೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨ÉÆÃ"), "ಬೋ");});
QUnit.test("u2a ಬೌ => ¨Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಬೌ"), "¨Ë");});
QUnit.test("a2u ¨Ë => ಬೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨Ë"), "ಬೌ");});
QUnit.test("u2a ಭ್ => ¨sï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭ್"), "¨sï");});
QUnit.test("a2u ¨sï => ಭ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sï"), "ಭ್");});
QUnit.test("u2a ಭ => ¨sÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭ"), "¨sÀ");});
QUnit.test("a2u ¨sÀ => ಭ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÀ"), "ಭ");});
QUnit.test("u2a ಭಾ => ¨sÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭಾ"), "¨sÁ");});
QUnit.test("a2u ¨sÁ => ಭಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÁ"), "ಭಾ");});
QUnit.test("u2a ಭಿ => ©ü", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭಿ"), "©ü");});
QUnit.test("a2u ©ü => ಭಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("©ü"), "ಭಿ");});
QUnit.test("u2a ಭೀ => ©üÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೀ"), "©üÃ");});
QUnit.test("a2u ©üÃ => ಭೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("©üÃ"), "ಭೀ");});
QUnit.test("u2a ಭು => ¨sÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭು"), "¨sÀÄ");});
QUnit.test("a2u ¨sÀÄ => ಭು", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÀÄ"), "ಭು");});
QUnit.test("u2a ಭೂ => ¨sÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೂ"), "¨sÀÆ");});
QUnit.test("a2u ¨sÀÆ => ಭೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÀÆ"), "ಭೂ");});
QUnit.test("u2a ಭೃ => ¨sÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೃ"), "¨sÀÈ");});
QUnit.test("a2u ¨sÀÈ => ಭೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÀÈ"), "ಭೃ");});
QUnit.test("u2a ಭೆ => ¨sÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೆ"), "¨sÉ");});
QUnit.test("a2u ¨sÉ => ಭೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÉ"), "ಭೆ");});
QUnit.test("u2a ಭೇ => ¨sÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೇ"), "¨sÉÃ");});
QUnit.test("a2u ¨sÉÃ => ಭೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÉÃ"), "ಭೇ");});
QUnit.test("u2a ಭೈ => ¨sÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೈ"), "¨sÉÊ");});
QUnit.test("a2u ¨sÉÊ => ಭೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÉÊ"), "ಭೈ");});
QUnit.test("u2a ಭೊ => ¨sÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೊ"), "¨sÉÆ");});
QUnit.test("a2u ¨sÉÆ => ಭೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÉÆ"), "ಭೊ");});
QUnit.test("u2a ಭೋ => ¨sÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೋ"), "¨sÉÆÃ");});
QUnit.test("a2u ¨sÉÆÃ => ಭೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sÉÆÃ"), "ಭೋ");});
QUnit.test("u2a ಭೌ => ¨sË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಭೌ"), "¨sË");});
QUnit.test("a2u ¨sË => ಭೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¨sË"), "ಭೌ");});
QUnit.test("u2a ಮ್ => ªÀiï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮ್"), "ªÀiï");});
QUnit.test("a2u ªÀiï => ಮ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀiï"), "ಮ್");});
QUnit.test("u2a ಮ => ªÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮ"), "ªÀÄ");});
QUnit.test("a2u ªÀÄ => ಮ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÄ"), "ಮ");});
QUnit.test("u2a ಮಾ => ªÀiÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮಾ"), "ªÀiÁ");});
QUnit.test("a2u ªÀiÁ => ಮಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀiÁ"), "ಮಾ");});
QUnit.test("u2a ಮಿ => «Ä", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮಿ"), "«Ä");});
QUnit.test("a2u «Ä => ಮಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("«Ä"), "ಮಿ");});
QUnit.test("u2a ಮೀ => «ÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೀ"), "«ÄÃ");});
QUnit.test("a2u «ÄÃ => ಮೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("«ÄÃ"), "ಮೀ");});
QUnit.test("u2a ಮು => ªÀÄÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮು"), "ªÀÄÄ");});
QUnit.test("a2u ªÀÄÄ => ಮು", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÄÄ"), "ಮು");});
QUnit.test("u2a ಮೂ => ªÀÄÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೂ"), "ªÀÄÆ");});
QUnit.test("a2u ªÀÄÆ => ಮೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÄÆ"), "ಮೂ");});
QUnit.test("u2a ಮೃ => ªÀÄÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೃ"), "ªÀÄÈ");});
QUnit.test("a2u ªÀÄÈ => ಮೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÄÈ"), "ಮೃ");});
QUnit.test("u2a ಮೆ => ªÉÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೆ"), "ªÉÄ");});
QUnit.test("a2u ªÉÄ => ಮೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÄ"), "ಮೆ");});
QUnit.test("u2a ಮೇ => ªÉÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೇ"), "ªÉÄÃ");});
QUnit.test("a2u ªÉÄÃ => ಮೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÄÃ"), "ಮೇ");});
QUnit.test("u2a ಮೈ => ªÉÄÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೈ"), "ªÉÄÊ");});
QUnit.test("a2u ªÉÄÊ => ಮೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÄÊ"), "ಮೈ");});
QUnit.test("u2a ಮೊ => ªÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೊ"), "ªÉÆ");});
QUnit.test("a2u ªÉÆ => ಮೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÆ"), "ಮೊ");});
QUnit.test("u2a ಮೋ => ªÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೋ"), "ªÉÆÃ");});
QUnit.test("a2u ªÉÆÃ => ಮೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÆÃ"), "ಮೋ");});
QUnit.test("u2a ಮೌ => ªÀiË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಮೌ"), "ªÀiË");});
QUnit.test("a2u ªÀiË => ಮೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀiË"), "ಮೌ");});
QUnit.test("u2a ಯ್ => AiÀiï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯ್"), "AiÀiï");});
QUnit.test("a2u AiÀiï => ಯ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀiï"), "ಯ್");});
QUnit.test("u2a ಯ => AiÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯ"), "AiÀÄ");});
QUnit.test("a2u AiÀÄ => ಯ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀÄ"), "ಯ");});
QUnit.test("u2a ಯಾ => AiÀiÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯಾ"), "AiÀiÁ");});
QUnit.test("a2u AiÀiÁ => ಯಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀiÁ"), "ಯಾ");});
QUnit.test("u2a ಯಿ => ¬Ä", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯಿ"), "¬Ä");});
QUnit.test("a2u ¬Ä => ಯಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¬Ä"), "ಯಿ");});
QUnit.test("u2a ಯೀ => ¬ÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೀ"), "¬ÄÃ");});
QUnit.test("a2u ¬ÄÃ => ಯೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¬ÄÃ"), "ಯೀ");});
QUnit.test("u2a ಯು => AiÀÄÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯು"), "AiÀÄÄ");});
QUnit.test("a2u AiÀÄÄ => ಯು", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀÄÄ"), "ಯು");});
QUnit.test("u2a ಯೂ => AiÀÄÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೂ"), "AiÀÄÆ");});
QUnit.test("a2u AiÀÄÆ => ಯೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀÄÆ"), "ಯೂ");});
QUnit.test("u2a ಯೃ => AiÀÄÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೃ"), "AiÀÄÈ");});
QUnit.test("a2u AiÀÄÈ => ಯೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀÄÈ"), "ಯೃ");});
QUnit.test("u2a ಯೆ => AiÉÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೆ"), "AiÉÄ");});
QUnit.test("a2u AiÉÄ => ಯೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÉÄ"), "ಯೆ");});
QUnit.test("u2a ಯೇ => AiÉÄÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೇ"), "AiÉÄÃ");});
QUnit.test("a2u AiÉÄÃ => ಯೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÉÄÃ"), "ಯೇ");});
QUnit.test("u2a ಯೈ => AiÉÄÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೈ"), "AiÉÄÊ");});
QUnit.test("a2u AiÉÄÊ => ಯೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÉÄÊ"), "ಯೈ");});
QUnit.test("u2a ಯೊ => AiÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೊ"), "AiÉÆ");});
QUnit.test("a2u AiÉÆ => ಯೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÉÆ"), "ಯೊ");});
QUnit.test("u2a ಯೋ => AiÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೋ"), "AiÉÆÃ");});
QUnit.test("a2u AiÉÆÃ => ಯೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÉÆÃ"), "ಯೋ");});
QUnit.test("u2a ಯೌ => AiÀiË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಯೌ"), "AiÀiË");});
QUnit.test("a2u AiÀiË => ಯೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("AiÀiË"), "ಯೌ");});
QUnit.test("u2a ರ್ => gï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರ್"), "gï");});
QUnit.test("a2u gï => ರ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("gï"), "ರ್");});
QUnit.test("u2a ರ => gÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರ"), "gÀ");});
QUnit.test("a2u gÀ => ರ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀ"), "ರ");});
QUnit.test("u2a ರಾ => gÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರಾ"), "gÁ");});
QUnit.test("a2u gÁ => ರಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÁ"), "ರಾ");});
QUnit.test("u2a ರಿ => j", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರಿ"), "j");});
QUnit.test("a2u j => ರಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("j"), "ರಿ");});
QUnit.test("u2a ರೀ => jÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೀ"), "jÃ");});
QUnit.test("a2u jÃ => ರೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("jÃ"), "ರೀ");});
QUnit.test("u2a ರು => gÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರು"), "gÀÄ");});
QUnit.test("a2u gÀÄ => ರು", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀÄ"), "ರು");});
QUnit.test("u2a ರೂ => gÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೂ"), "gÀÆ");});
QUnit.test("a2u gÀÆ => ರೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀÆ"), "ರೂ");});
QUnit.test("u2a ರೃ => gÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೃ"), "gÀÈ");});
QUnit.test("a2u gÀÈ => ರೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÀÈ"), "ರೃ");});
QUnit.test("u2a ರೆ => gÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೆ"), "gÉ");});
QUnit.test("a2u gÉ => ರೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉ"), "ರೆ");});
QUnit.test("u2a ರೇ => gÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೇ"), "gÉÃ");});
QUnit.test("a2u gÉÃ => ರೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉÃ"), "ರೇ");});
QUnit.test("u2a ರೈ => gÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೈ"), "gÉÊ");});
QUnit.test("a2u gÉÊ => ರೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉÊ"), "ರೈ");});
QUnit.test("u2a ರೊ => gÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೊ"), "gÉÆ");});
QUnit.test("a2u gÉÆ => ರೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉÆ"), "ರೊ");});
QUnit.test("u2a ರೋ => gÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೋ"), "gÉÆÃ");});
QUnit.test("a2u gÉÆÃ => ರೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gÉÆÃ"), "ರೋ");});
QUnit.test("u2a ರೌ => gË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ರೌ"), "gË");});
QUnit.test("a2u gË => ರೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("gË"), "ರೌ");});
QUnit.test("u2a ಲ್ => ¯ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲ್"), "¯ï");});
QUnit.test("a2u ¯ï => ಲ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯ï"), "ಲ್");});
QUnit.test("u2a ಲ => ®", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲ"), "®");});
QUnit.test("a2u ® => ಲ", function(assert){assert.strictEqual(kn.ascii_to_unicode("®"), "ಲ");});
QUnit.test("u2a ಲಾ => ¯Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲಾ"), "¯Á");});
QUnit.test("a2u ¯Á => ಲಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯Á"), "ಲಾ");});
QUnit.test("u2a ಲಿ => °", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲಿ"), "°");});
QUnit.test("a2u ° => ಲಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("°"), "ಲಿ");});
QUnit.test("u2a ಲೀ => °Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೀ"), "°Ã");});
QUnit.test("a2u °Ã => ಲೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("°Ã"), "ಲೀ");});
QUnit.test("u2a ಲು => ®Ä", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲು"), "®Ä");});
QUnit.test("a2u ®Ä => ಲು", function(assert){assert.strictEqual(kn.ascii_to_unicode("®Ä"), "ಲು");});
QUnit.test("u2a ಲೂ => ®Æ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೂ"), "®Æ");});
QUnit.test("a2u ®Æ => ಲೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("®Æ"), "ಲೂ");});
QUnit.test("u2a ಲೃ => ®È", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೃ"), "®È");});
QUnit.test("a2u ®È => ಲೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("®È"), "ಲೃ");});
QUnit.test("u2a ಲೆ => ¯É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೆ"), "¯É");});
QUnit.test("a2u ¯É => ಲೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯É"), "ಲೆ");});
QUnit.test("u2a ಲೇ => ¯ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೇ"), "¯ÉÃ");});
QUnit.test("a2u ¯ÉÃ => ಲೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯ÉÃ"), "ಲೇ");});
QUnit.test("u2a ಲೈ => ¯ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೈ"), "¯ÉÊ");});
QUnit.test("a2u ¯ÉÊ => ಲೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯ÉÊ"), "ಲೈ");});
QUnit.test("u2a ಲೊ => ¯ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೊ"), "¯ÉÆ");});
QUnit.test("a2u ¯ÉÆ => ಲೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯ÉÆ"), "ಲೊ");});
QUnit.test("u2a ಲೋ => ¯ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೋ"), "¯ÉÆÃ");});
QUnit.test("a2u ¯ÉÆÃ => ಲೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯ÉÆÃ"), "ಲೋ");});
QUnit.test("u2a ಲೌ => ¯Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಲೌ"), "¯Ë");});
QUnit.test("a2u ¯Ë => ಲೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¯Ë"), "ಲೌ");});
QUnit.test("u2a ವ್ => ªï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವ್"), "ªï");});
QUnit.test("a2u ªï => ವ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªï"), "ವ್");});
QUnit.test("u2a ವ => ªÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವ"), "ªÀ");});
QUnit.test("a2u ªÀ => ವ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀ"), "ವ");});
QUnit.test("u2a ವಾ => ªÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವಾ"), "ªÁ");});
QUnit.test("a2u ªÁ => ವಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÁ"), "ವಾ");});
QUnit.test("u2a ವಿ => «", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವಿ"), "«");});
QUnit.test("a2u « => ವಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("«"), "ವಿ");});
QUnit.test("u2a ವೀ => «Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೀ"), "«Ã");});
QUnit.test("a2u «Ã => ವೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("«Ã"), "ವೀ");});
QUnit.test("u2a ವು => ªÀÅ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವು"), "ªÀÅ");});
QUnit.test("a2u ªÀÅ => ವು", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÅ"), "ವು");});
QUnit.test("u2a ವೂ => ªÀÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೂ"), "ªÀÇ");});
QUnit.test("a2u ªÀÇ => ವೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÇ"), "ವೂ");});
QUnit.test("u2a ವೃ => ªÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೃ"), "ªÀÈ");});
QUnit.test("a2u ªÀÈ => ವೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÀÈ"), "ವೃ");});
QUnit.test("u2a ವೆ => ªÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೆ"), "ªÉ");});
QUnit.test("a2u ªÉ => ವೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉ"), "ವೆ");});
QUnit.test("u2a ವೇ => ªÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೇ"), "ªÉÃ");});
QUnit.test("a2u ªÉÃ => ವೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÃ"), "ವೇ");});
QUnit.test("u2a ವೈ => ªÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೈ"), "ªÉÊ");});
QUnit.test("a2u ªÉÊ => ವೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÊ"), "ವೈ");});
QUnit.test("u2a ವೊ => ªÉÇ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೊ"), "ªÉÇ");});
QUnit.test("a2u ªÉÇ => ವೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÇ"), "ವೊ");});
QUnit.test("u2a ವೋ => ªÉÇÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೋ"), "ªÉÇÃ");});
QUnit.test("a2u ªÉÇÃ => ವೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªÉÇÃ"), "ವೋ");});
QUnit.test("u2a ವೌ => ªË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ವೌ"), "ªË");});
QUnit.test("a2u ªË => ವೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ªË"), "ವೌ");});
QUnit.test("u2a ಶ್ => ±ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶ್"), "±ï");});
QUnit.test("a2u ±ï => ಶ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ï"), "ಶ್");});
QUnit.test("u2a ಶ => ±À", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶ"), "±À");});
QUnit.test("a2u ±À => ಶ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±À"), "ಶ");});
QUnit.test("u2a ಶಾ => ±Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶಾ"), "±Á");});
QUnit.test("a2u ±Á => ಶಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±Á"), "ಶಾ");});
QUnit.test("u2a ಶಿ => ²", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶಿ"), "²");});
QUnit.test("a2u ² => ಶಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("²"), "ಶಿ");});
QUnit.test("u2a ಶೀ => ²Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೀ"), "²Ã");});
QUnit.test("a2u ²Ã => ಶೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("²Ã"), "ಶೀ");});
QUnit.test("u2a ಶು => ±ÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶು"), "±ÀÄ");});
QUnit.test("a2u ±ÀÄ => ಶು", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÀÄ"), "ಶು");});
QUnit.test("u2a ಶೂ => ±ÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೂ"), "±ÀÆ");});
QUnit.test("a2u ±ÀÆ => ಶೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÀÆ"), "ಶೂ");});
QUnit.test("u2a ಶೃ => ±ÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೃ"), "±ÀÈ");});
QUnit.test("a2u ±ÀÈ => ಶೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÀÈ"), "ಶೃ");});
QUnit.test("u2a ಶೆ => ±É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೆ"), "±É");});
QUnit.test("a2u ±É => ಶೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±É"), "ಶೆ");});
QUnit.test("u2a ಶೇ => ±ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೇ"), "±ÉÃ");});
QUnit.test("a2u ±ÉÃ => ಶೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÉÃ"), "ಶೇ");});
QUnit.test("u2a ಶೈ => ±ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೈ"), "±ÉÊ");});
QUnit.test("a2u ±ÉÊ => ಶೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÉÊ"), "ಶೈ");});
QUnit.test("u2a ಶೊ => ±ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೊ"), "±ÉÆ");});
QUnit.test("a2u ±ÉÆ => ಶೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÉÆ"), "ಶೊ");});
QUnit.test("u2a ಶೋ => ±ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೋ"), "±ÉÆÃ");});
QUnit.test("a2u ±ÉÆÃ => ಶೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±ÉÆÃ"), "ಶೋ");});
QUnit.test("u2a ಶೌ => ±Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಶೌ"), "±Ë");});
QUnit.test("a2u ±Ë => ಶೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("±Ë"), "ಶೌ");});
QUnit.test("u2a ಷ್ => μï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷ್"), "μï");});
QUnit.test("a2u μï => ಷ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("μï"), "ಷ್");});
QUnit.test("u2a ಷ => μÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷ"), "μÀ");});
QUnit.test("a2u μÀ => ಷ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÀ"), "ಷ");});
QUnit.test("u2a ಷಾ => μÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷಾ"), "μÁ");});
QUnit.test("a2u μÁ => ಷಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÁ"), "ಷಾ");});
QUnit.test("u2a ಷಿ => ¶", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷಿ"), "¶");});
QUnit.test("a2u ¶ => ಷಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¶"), "ಷಿ");});
QUnit.test("u2a ಷೀ => ¶Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೀ"), "¶Ã");});
QUnit.test("a2u ¶Ã => ಷೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¶Ã"), "ಷೀ");});
QUnit.test("u2a ಷು => μÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷು"), "μÀÄ");});
QUnit.test("a2u μÀÄ => ಷು", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÀÄ"), "ಷು");});
QUnit.test("u2a ಷೂ => μÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೂ"), "μÀÆ");});
QUnit.test("a2u μÀÆ => ಷೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÀÆ"), "ಷೂ");});
QUnit.test("u2a ಷೃ => μÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೃ"), "μÀÈ");});
QUnit.test("a2u μÀÈ => ಷೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÀÈ"), "ಷೃ");});
QUnit.test("u2a ಷೆ => μÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೆ"), "μÉ");});
QUnit.test("a2u μÉ => ಷೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÉ"), "ಷೆ");});
QUnit.test("u2a ಷೇ => μÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೇ"), "μÉÃ");});
QUnit.test("a2u μÉÃ => ಷೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÉÃ"), "ಷೇ");});
QUnit.test("u2a ಷೈ => μÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೈ"), "μÉÊ");});
QUnit.test("a2u μÉÊ => ಷೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÉÊ"), "ಷೈ");});
QUnit.test("u2a ಷೊ => μÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೊ"), "μÉÆ");});
QUnit.test("a2u μÉÆ => ಷೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÉÆ"), "ಷೊ");});
QUnit.test("u2a ಷೋ => μÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೋ"), "μÉÆÃ");});
QUnit.test("a2u μÉÆÃ => ಷೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μÉÆÃ"), "ಷೋ");});
QUnit.test("u2a ಷೌ => μË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಷೌ"), "μË");});
QUnit.test("a2u μË => ಷೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("μË"), "ಷೌ");});
QUnit.test("u2a ಸ್ => ¸ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸ್"), "¸ï");});
QUnit.test("a2u ¸ï => ಸ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ï"), "ಸ್");});
QUnit.test("u2a ಸ => ¸À", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸ"), "¸À");});
QUnit.test("a2u ¸À => ಸ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸À"), "ಸ");});
QUnit.test("u2a ಸಾ => ¸Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸಾ"), "¸Á");});
QUnit.test("a2u ¸Á => ಸಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸Á"), "ಸಾ");});
QUnit.test("u2a ಸಿ => ¹", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸಿ"), "¹");});
QUnit.test("a2u ¹ => ಸಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¹"), "ಸಿ");});
QUnit.test("u2a ಸೀ => ¹Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೀ"), "¹Ã");});
QUnit.test("a2u ¹Ã => ಸೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¹Ã"), "ಸೀ");});
QUnit.test("u2a ಸು => ¸ÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸು"), "¸ÀÄ");});
QUnit.test("a2u ¸ÀÄ => ಸು", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÀÄ"), "ಸು");});
QUnit.test("u2a ಸೂ => ¸ÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೂ"), "¸ÀÆ");});
QUnit.test("a2u ¸ÀÆ => ಸೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÀÆ"), "ಸೂ");});
QUnit.test("u2a ಸೃ => ¸ÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೃ"), "¸ÀÈ");});
QUnit.test("a2u ¸ÀÈ => ಸೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÀÈ"), "ಸೃ");});
QUnit.test("u2a ಸೆ => ¸É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೆ"), "¸É");});
QUnit.test("a2u ¸É => ಸೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸É"), "ಸೆ");});
QUnit.test("u2a ಸೇ => ¸ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೇ"), "¸ÉÃ");});
QUnit.test("a2u ¸ÉÃ => ಸೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÉÃ"), "ಸೇ");});
QUnit.test("u2a ಸೈ => ¸ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೈ"), "¸ÉÊ");});
QUnit.test("a2u ¸ÉÊ => ಸೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÉÊ"), "ಸೈ");});
QUnit.test("u2a ಸೊ => ¸ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೊ"), "¸ÉÆ");});
QUnit.test("a2u ¸ÉÆ => ಸೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÉÆ"), "ಸೊ");});
QUnit.test("u2a ಸೋ => ¸ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೋ"), "¸ÉÆÃ");});
QUnit.test("a2u ¸ÉÆÃ => ಸೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸ÉÆÃ"), "ಸೋ");});
QUnit.test("u2a ಸೌ => ¸Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಸೌ"), "¸Ë");});
QUnit.test("a2u ¸Ë => ಸೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¸Ë"), "ಸೌ");});
QUnit.test("u2a ಹ್ => ºï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹ್"), "ºï");});
QUnit.test("a2u ºï => ಹ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºï"), "ಹ್");});
QUnit.test("u2a ಹ => ºÀ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹ"), "ºÀ");});
QUnit.test("a2u ºÀ => ಹ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÀ"), "ಹ");});
QUnit.test("u2a ಹಾ => ºÁ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹಾ"), "ºÁ");});
QUnit.test("a2u ºÁ => ಹಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÁ"), "ಹಾ");});
QUnit.test("u2a ಹಿ => »", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹಿ"), "»");});
QUnit.test("a2u » => ಹಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("»"), "ಹಿ");});
QUnit.test("u2a ಹೀ => »Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೀ"), "»Ã");});
QUnit.test("a2u »Ã => ಹೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("»Ã"), "ಹೀ");});
QUnit.test("u2a ಹು => ºÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹು"), "ºÀÄ");});
QUnit.test("a2u ºÀÄ => ಹು", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÀÄ"), "ಹು");});
QUnit.test("u2a ಹೂ => ºÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೂ"), "ºÀÆ");});
QUnit.test("a2u ºÀÆ => ಹೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÀÆ"), "ಹೂ");});
QUnit.test("u2a ಹೃ => ºÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೃ"), "ºÀÈ");});
QUnit.test("a2u ºÀÈ => ಹೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÀÈ"), "ಹೃ");});
QUnit.test("u2a ಹೆ => ºÉ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೆ"), "ºÉ");});
QUnit.test("a2u ºÉ => ಹೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÉ"), "ಹೆ");});
QUnit.test("u2a ಹೇ => ºÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೇ"), "ºÉÃ");});
QUnit.test("a2u ºÉÃ => ಹೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÉÃ"), "ಹೇ");});
QUnit.test("u2a ಹೈ => ºÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೈ"), "ºÉÊ");});
QUnit.test("a2u ºÉÊ => ಹೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÉÊ"), "ಹೈ");});
QUnit.test("u2a ಹೊ => ºÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೊ"), "ºÉÆ");});
QUnit.test("a2u ºÉÆ => ಹೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÉÆ"), "ಹೊ");});
QUnit.test("u2a ಹೋ => ºÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೋ"), "ºÉÆÃ");});
QUnit.test("a2u ºÉÆÃ => ಹೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºÉÆÃ"), "ಹೋ");});
QUnit.test("u2a ಹೌ => ºË", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಹೌ"), "ºË");});
QUnit.test("a2u ºË => ಹೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("ºË"), "ಹೌ");});
QUnit.test("u2a ಳ್ => ¼ï", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳ್"), "¼ï");});
QUnit.test("a2u ¼ï => ಳ್", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ï"), "ಳ್");});
QUnit.test("u2a ಳ => ¼À", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳ"), "¼À");});
QUnit.test("a2u ¼À => ಳ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼À"), "ಳ");});
QUnit.test("u2a ಳಾ => ¼Á", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳಾ"), "¼Á");});
QUnit.test("a2u ¼Á => ಳಾ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼Á"), "ಳಾ");});
QUnit.test("u2a ಳಿ => ½", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳಿ"), "½");});
QUnit.test("a2u ½ => ಳಿ", function(assert){assert.strictEqual(kn.ascii_to_unicode("½"), "ಳಿ");});
QUnit.test("u2a ಳೀ => ½Ã", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೀ"), "½Ã");});
QUnit.test("a2u ½Ã => ಳೀ", function(assert){assert.strictEqual(kn.ascii_to_unicode("½Ã"), "ಳೀ");});
QUnit.test("u2a ಳು => ¼ÀÄ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳು"), "¼ÀÄ");});
QUnit.test("a2u ¼ÀÄ => ಳು", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÀÄ"), "ಳು");});
QUnit.test("u2a ಳೂ => ¼ÀÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೂ"), "¼ÀÆ");});
QUnit.test("a2u ¼ÀÆ => ಳೂ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÀÆ"), "ಳೂ");});
QUnit.test("u2a ಳೃ => ¼ÀÈ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೃ"), "¼ÀÈ");});
QUnit.test("a2u ¼ÀÈ => ಳೃ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÀÈ"), "ಳೃ");});
QUnit.test("u2a ಳೆ => ¼É", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೆ"), "¼É");});
QUnit.test("a2u ¼É => ಳೆ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼É"), "ಳೆ");});
QUnit.test("u2a ಳೇ => ¼ÉÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೇ"), "¼ÉÃ");});
QUnit.test("a2u ¼ÉÃ => ಳೇ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÉÃ"), "ಳೇ");});
QUnit.test("u2a ಳೈ => ¼ÉÊ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೈ"), "¼ÉÊ");});
QUnit.test("a2u ¼ÉÊ => ಳೈ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÉÊ"), "ಳೈ");});
QUnit.test("u2a ಳೊ => ¼ÉÆ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೊ"), "¼ÉÆ");});
QUnit.test("a2u ¼ÉÆ => ಳೊ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÉÆ"), "ಳೊ");});
QUnit.test("u2a ಳೋ => ¼ÉÆÃ", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೋ"), "¼ÉÆÃ");});
QUnit.test("a2u ¼ÉÆÃ => ಳೋ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼ÉÆÃ"), "ಳೋ");});
QUnit.test("u2a ಳೌ => ¼Ë", function(assert){assert.strictEqual(kn.unicode_to_ascii("ಳೌ"), "¼Ë");});
QUnit.test("a2u ¼Ë => ಳೌ", function(assert){assert.strictEqual(kn.ascii_to_unicode("¼Ë"), "ಳೌ");});
var data = [
	["¸ÁévÀAvÀæ", "ಸ್ವಾತಂತ್ರ"],
    ["AiÀÄdÕ", "ಯಜ್ಞ"],
    ["PÁåA¥ÉÇÌÃ", "ಕ್ಯಾಂಪ್ಕೋ"],
    ["¥ÉÇæ", "ಪ್ರೊ"],
    ["DAiÉÄÌ", "ಆಯ್ಕೆ"],
    ["®PÀëå", "ಲಕ್ಷ್ಯ"],
    ["J®ègÉÆ¼ÀUÉÆAzÁUÀÄ ªÀÄAPÀÄwªÀÄä", "ಎಲ್ಲರೊಳಗೊಂದಾಗು ಮಂಕುತಿಮ್ಮ"],
    ["PÀ£ÀßqÀ ªÀÄvÀÄÛ ¸ÀA¸ÀÌøw E¯ÁSÉ", "ಕನ್ನಡ ಮತ್ತು ಸಂಸ್ಕೃತಿ ಇಲಾಖೆ"],
    ["Pïgï", "ಕ್‌ರ್"],
    ["gÁåAPï", "ರ‍್ಯಾಂಕ್"],
    ["AiÀiÁAðPï", "ರ್ಯಾಂಕ್"],
    ["¸ÀÆAiÀÄð", "ಸೂರ್ಯ"],
    ["¸ÀÆAiÀiÁð", "ಸೂರ್ಯಾ"],
    ["PÁåPï", "ಕ್ಯಾಕ್"],
    ["UÉÆæPï", "ಗ್ರೊಕ್"],
    ["¥ÀæweÉÕ", "ಪ್ರತಿಜ್ಞೆ"],
    ["¦æÃw", "ಪ್ರೀತಿ"],
    ["CAiÉÆåÃ", "ಅಯ್ಯೋ"],
    ["UÁæªÀiÁ¥sÉÇÃ£ÀÄ", "ಗ್ರಾಮಾಫೋನು"],
    ["¨ÉÃrPÉÆ¼ÀÄîwÛzÉÝÃ£É", "ಬೇಡಿಕೊಳ್ಳುತ್ತಿದ್ದೇನೆ"],
    ["UÉÆÃ¾õÀÎgÉ", "ಗೋಱ್ಗರೆ"],
    ["ªÀÄÆgÀÄ ¥ÉÇæmÁ£ïUÀ¼ÀÄ", "ಮೂರು ಪ್ರೊಟಾನ್‌ಗಳು"],
    ["¨sÁμÉ¬ÄAzÀ", "ಭಾಷೆಯಿಂದ"],
    ["¥ÉÇÃZÀÄðVÃ¸ï", "ಪೋರ್ಚುಗೀಸ್"],
    ["ªÀiÁqÀÄvÀÛÉA§ÄzÀgÀ°è", "ಮಾಡುತ್ತೆಂಬುದರಲ್ಲಿ", true],
    ["ªÀiÁqÀÄvÉÛA§ÄzÀgÀ°è",  "ಮಾಡುತ್ತೆಂಬುದರಲ್ಲಿ"],
    ["CªÀ¢üAiÀÄ°èAiÉÄÃ", "ಅವಧಿಯಲ್ಲಿಯೇ"],
    ["CªÀ¢ü0iÀÄ°è0iÉÄÃ", "ಅವಧಿಯಲ್ಲಿಯೇ", true]
]

data.forEach(function(item){
    QUnit.test( "a2u " + item[0] + " => " + item[1], function( assert ) {
	assert.strictEqual(kn.ascii_to_unicode(item[0]), item[1]);
    });
    if (item[2] === undefined) {
	QUnit.test( "u2a " + item[1] + " => " + item[0], function( assert ) {
	    assert.strictEqual(kn.unicode_to_ascii(item[1]), item[0]);
	});
    }
});

QUnit.test( "u2a ೦ ೧ ೨ ೩ ೪ ೫ ೬ ೭ ೮ ೯ => 0 1 2 3 4 5 6 7 8 9", function( assert ) {
	assert.strictEqual(kn.unicode_to_ascii("೦ ೧ ೨ ೩ ೪ ೫ ೬ ೭ ೮ ೯"), "0 1 2 3 4 5 6 7 8 9");
});

QUnit.test( "u2a 0 1 2 3 4 5 6 7 8 9 => 0 1 2 3 4 5 6 7 8 9", function( assert ) {
	assert.strictEqual(kn.unicode_to_ascii("0 1 2 3 4 5 6 7 8 9"), "0 1 2 3 4 5 6 7 8 9");
});

QUnit.test( "a2u 0 1 2 3 4 5 6 7 8 9 => ೦ ೧ ೨ ೩ ೪ ೫ ೬ ೭ ೮ ೯", function( assert ) {
	assert.strictEqual(kn.ascii_to_unicode("0 1 2 3 4 5 6 7 8 9"), "೦ ೧ ೨ ೩ ೪ ೫ ೬ ೭ ೮ ೯");
});

QUnit.test( "a2u 0 1 2 3 4 5 6 7 8 9 => 0 1 2 3 4 5 6 7 8 9", function( assert ) {
	assert.strictEqual(kn.ascii_to_unicode("0 1 2 3 4 5 6 7 8 9", true), "0 1 2 3 4 5 6 7 8 9");
});
